enum Role {
	ADMIN
	USER
}

type User @auth(
	query: { or: [{rule: "{$ROLE: {eq: \"ADMIN\" }}"},{rule: "{$ROLE: {eq: \"USER\" }}"}] },
	add: { rule: "{$ROLE: {eq: \"ADMIN\"}}" },
    update: { rule: "{$ROLE: {eq: \"ADMIN\"}}" },
    delete: { rule: "{$ROLE: {eq: \"ADMIN\"}}" },
){
	id: ID!
	email: String! @search(by: [hash]) @id
	name: String!
	role: Role!
	password_hash: String!
	date_created: DateTime!
	date_updated: DateTime!
	visited: [Place]
}

type City {
	id: ID!
	name: String! @search(by: [hash]) @id
	lat: Float!
	lng: Float!
	places: [Place] @hasInverse(field: city)
	advisory: Advisory @hasInverse(field: city)
	weather: Weather @hasInverse(field: city)
}

type Advisory {
	id: ID!
	city: City!
	continent: String!
	country: String!
	country_code: String!
	score: Float!
	last_updated: String
	message: String
	source: String
}

type Place {
	id: ID!
	place_id: String! @search(by: [hash]) @id
	name: String! @search(by: [fulltext])
	category: String! @search(by: [exact])
	city: City!
	city_name: String!
	lat: Float!
	lng: Float!
	address: String
	avg_user_rating: Float
	gmaps_url: String
	location_type: [String]
	no_user_rating: Int
	photo_id: String
}

type Weather {
	id: ID!
	city: City!
	city_name: String!
	description: String
	feels_like: Float
	humidity: Int
	pressure: Int
	sunrise: Int
	sunset: Int
	temp: Float
	temp_min: Float
	temp_max: Float
	visibility: String
	wind_direction: Int
	wind_speed: Float
}

# ==============================================================================
# Custom Queries

type UploadFeedResponse @remote {
	country_code: String
	city_name: String
	lat: Float
	lng: Float
	message: String
}

type Data {
    code: String
    message: String
}

type DataResponse {
	data: Data
}

type Query {
	uploadFeed(countryCode: String!, cityName: String!, lat: Float!, lng: Float!): UploadFeedResponse @custom(http:{
		url: "{{.UploadFeedURL}}",
		method: "POST",
		body: "{countrycode: $countryCode, cityname: $cityName, lat: $lat, lng: $lng}"
	})

	addUserRating(email: String!, placeId: String!, stars: Int!): DataResponse @custom(dql: """
		upsert {
  			query {
				var(func: eq(User.email, $email)) {
					c as uid
				}
				var(func: eq(Place.place_id, $placeId)) {
					p as uid
				}
			}
			mutation {
				set {
					uid(c) <User.visited> uid(p) (stars=$stars) .
				}
			}
		}
	""")
}

# ==============================================================================
# Authentication and Authortization

# Dgraph.Authorization {"header":"X-Travel-Auth", "namespace":"Auth", "algo": "RS256", "verificationkey":"{{.PublicKey}}"}
